<?php

/**
+----------------------------------------------------------
 * 构造MmCache 对象
+----------------------------------------------------------
 * @return object
+----------------------------------------------------------
 */
function getCacheObj()
{
    $config = array();
    require(ROOT_PATH .VERSION. 'config/config.php');
    $cache = new Memcached();
    $cache->addServer($config['memHost'],$config['memPost']);
    return $cache;
}

/**
+----------------------------------------------------------
 * 读取缓存
+----------------------------------------------------------
 * @param string $key 缓存键值
+----------------------------------------------------------
 * @return mixed
+----------------------------------------------------------
 */
function getVar($key)
{
    return getCacheObj()->get($key);
}


/**
+----------------------------------------------------------
 * 写入缓存
+----------------------------------------------------------
 * @param string  $key    缓存键值
 * @param mixed   $value  被缓存的数据
+----------------------------------------------------------
 * @return boolean
+----------------------------------------------------------
 */
function setVar($key, $value, $expire=0)
{
    return getCacheObj()->set($key, $value,$expire);
}


/**
+----------------------------------------------------------
 * 删除缓存
+----------------------------------------------------------
 * @param  string $key 缓存键值
+----------------------------------------------------------
 * @return boolean
+----------------------------------------------------------
 */
function delVar($key)
{
    return getCacheObj()->remove($key);
}

/*
 +----------------------------------------------------------kioikjjjjsjwaq n
 * 同时获取多个缓存
+----------------------------------------------------------
 * @param  array $keyAry 缓存键值数组
+----------------------------------------------------------
 * @return array
+----------------------------------------------------------
 * */
function getMulti($keyAry)
{
    return getCacheObj()->getMulti($keyAry);
}